// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"e-ticketing-gin/configs"
	"e-ticketing-gin/features/users"
	"e-ticketing-gin/features/users/data"
	"e-ticketing-gin/features/users/handler"
	"e-ticketing-gin/features/users/service"
	"e-ticketing-gin/helper/email"
	"e-ticketing-gin/helper/enkrip"
	"e-ticketing-gin/helper/jwt"
	"e-ticketing-gin/routes"
	"e-ticketing-gin/server"
	"e-ticketing-gin/utils/database"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializedServer() *server.Server {
	programConfig := configs.InitConfig()
	jwtInterface := jwt.NewJWT(programConfig)
	db := database.InitDB(programConfig)
	hashInterface := enkrip.New()
	userData := data.New(db, hashInterface)
	emailInterface := email.NewEmail(programConfig)
	userService := service.New(userData, hashInterface, jwtInterface, emailInterface)
	userHandler := handler.NewHandler(jwtInterface, userService)
	engine := routes.NewRoute(userHandler)
	serverServer := server.InitServer(engine, programConfig)
	return serverServer
}

// injector.go:

var userSet = wire.NewSet(data.New, wire.Bind(new(users.UserDataInterface), new(*data.UserData)), service.New, wire.Bind(new(users.UserServiceInterface), new(*service.UserService)), handler.NewHandler, wire.Bind(new(users.UserHandlerInterface), new(*handler.UserHandler)))
